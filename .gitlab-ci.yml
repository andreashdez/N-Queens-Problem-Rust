# https://hub.docker.com/r/library/rust/tags/
# image: "rust:latest"

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential

# Use cargo to test the project
# test:cargo:
#   script:
#     - rustc --version && cargo --version  # Print version info for debugging
#     - cargo test --workspace --verbose

# Optional: Use a third party library to generate gitlab junit reports
# test:junit-report:
#   script:
#     Should be specified in Cargo.toml
#     - cargo install junitify
#     - cargo test -- --format=json -Z unstable-options --report-time | junitify --out $CI_PROJECT_DIR/tests/
#   artifacts:
#     when: always
#     reports:
#       junit: $CI_PROJECT_DIR/tests/*.xml

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production

pages:
  stage: deploy
  image: python:latest
  script:
    - pip install mkdocs-material
    - mkdocs build --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# image: squidfunk/mkdocs-material:latest
#
# test:
#   stage: test
#   script:
#   - mkdocs build --strict --verbose --site-dir test
#   artifacts:
#     paths:
#     - test
#   rules:
#     - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
#
# pages:
#   stage: deploy
#   script:
#   - mkdocs build --strict --verbose
#   artifacts:
#     paths:
#     - public
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
